scalar Date

type Attributes {
  description: String
  shape: String
  taste: String
  hardiness: String
}

type Avocado {
  id: ID!
  sku: String!
  name: String!
  price: Float!
  image: String!
  attributes: Attributes
  createdAt: Date
  updatedAt: Date
  deletedAt: Date
}

input inputCreateAvocado {
  name: String!
  price: Float!
  image: String!
  description: String!
  shape: String!
  taste: String!
  hardiness: String!
}

type Query {
  getAvocados(skip: Int, take: Int, where: avocadoWhere): [Avocado]
  getAvocado(id: ID!): Avocado
}

type Mutation {
  addAvocado(data: inputCreateAvocado!): Avocado
}

input avocadoWhere {
  name: StringFilter
  price: Float
}

input StringFilter {
  equals: String
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
}
